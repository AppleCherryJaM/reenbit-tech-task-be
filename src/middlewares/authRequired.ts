// middlewares/authRequired.ts
import type { Request, Response, NextFunction } from 'express';
import { dbService } from '../services/db.service';
import { authVerifyMiddleware } from './authVerify';

// middlewares/authRequired.ts
export const authRequiredMiddleware = async (req: Request, res: Response, next: NextFunction) => {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    await authVerifyMiddleware(req, res, () => {});
    
    if (res.headersSent) return;

    const googleId = req.user!.id;
    const email = req.user!.email;

    console.log('üîê Auth Required: Ensuring user exists for:', email);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await dbService.findOrCreateUser(
      'google',
      googleId,
      email,
      req.user!.name,
      req.user!.picture
    );

    if (!user) {
      console.error('‚ùå Auth Required: Failed to find/create user');
      return res.status(500).json({ error: 'User setup failed' });
    }

    console.log('‚úÖ Auth Required: User ensured:', user.email);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º req.user - –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –±–∞–∑—ã –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π ID
    req.user = {
      id: user.id,        // ‚Üê –¢–µ–ø–µ—Ä—å —ç—Ç–æ ID –∏–∑ –±–∞–∑—ã, –∞ –Ω–µ Google ID
      email: user.email,
      name: user.name || '',
      picture: user.avatar || ''
      // dbId –Ω–µ –Ω—É–∂–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º id –¥–ª—è –≤—Å–µ–≥–æ
    };

    next();
  } catch (error) {
    console.error('‚ùå Auth Required error:', error);
    return res.status(500).json({ error: 'User authentication failed' });
  }
};